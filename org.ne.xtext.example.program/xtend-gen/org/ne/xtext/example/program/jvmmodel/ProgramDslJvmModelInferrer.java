/**
 * generated by Xtext 2.10.1
 */
package org.ne.xtext.example.program.jvmmodel;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.common.types.JvmGenericType;
import org.eclipse.xtext.common.types.JvmMember;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.common.types.JvmTypeReference;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer;
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.ne.xtext.example.program.programDsl.Program;

@SuppressWarnings("all")
public class ProgramDslJvmModelInferrer extends AbstractModelInferrer {
  @Inject
  @Extension
  private JvmTypesBuilder _jvmTypesBuilder;
  
  protected void _infer(final Program program, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    String _name = this.getName(program);
    final Procedure1<JvmGenericType> _function = (JvmGenericType it) -> {
      XBlockExpression _body = program.getBody();
      boolean _notEquals = (!Objects.equal(_body, null));
      if (_notEquals) {
        EList<JvmMember> _members = it.getMembers();
        JvmTypeReference _typeRef = this._typeReferenceBuilder.typeRef(void.class);
        final Procedure1<JvmOperation> _function_1 = (JvmOperation it_1) -> {
          XBlockExpression _body_1 = program.getBody();
          this._jvmTypesBuilder.setBody(it_1, _body_1);
        };
        JvmOperation _method = this._jvmTypesBuilder.toMethod(program, "main", _typeRef, _function_1);
        this._jvmTypesBuilder.<JvmOperation>operator_add(_members, _method);
      }
    };
    JvmGenericType _class = this._jvmTypesBuilder.toClass(program, _name, _function);
    acceptor.<JvmGenericType>accept(_class);
  }
  
  private String getName(final Program program) {
    Resource _eResource = program.eResource();
    URI _uRI = _eResource.getURI();
    URI _trimFileExtension = _uRI.trimFileExtension();
    String _lastSegment = _trimFileExtension.lastSegment();
    return StringExtensions.toFirstUpper(_lastSegment);
  }
  
  public void infer(final EObject program, final IJvmDeclaredTypeAcceptor acceptor, final boolean isPreIndexingPhase) {
    if (program instanceof Program) {
      _infer((Program)program, acceptor, isPreIndexingPhase);
      return;
    } else if (program != null) {
      _infer(program, acceptor, isPreIndexingPhase);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(program, acceptor, isPreIndexingPhase).toString());
    }
  }
}
